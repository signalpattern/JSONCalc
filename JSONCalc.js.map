{"version":3,"file":"JSONCalc.js","sourceRoot":"","sources":["JSONCalc.ts"],"names":[],"mappings":"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","sourcesContent":["import {get, set, isString, isObjectLike, each, map, has, isNil, cloneDeep, uniqBy, findKey, toPath, isUndefined} from \"lodash\";\nimport * as stringReplaceAsync from \"string-replace-async\";\n\ninterface CustomCalcOptions {\n    name: string;\n    options: any;\n}\n\nexport type CustomCalcProvider = (providerName: string, providerOptions?: any, dataPath?: string[]) => Promise<any>;\n\nexport class JSONCalc {\n\n    static CUSTOM_CALC_KEY_PREFIX = \"$\";\n    static STRING_REFERENCE_REGEX = \"{{(.+?)}}\";\n    static MISSING_VALUE_PLACEHOLDER = \"#VALUE!\";\n\n    private static _extractCustomCalcOptions(theObject: object): CustomCalcOptions {\n        let providerName = findKey(theObject, (keyValue, keyName) => {\n            return keyName.indexOf(JSONCalc.CUSTOM_CALC_KEY_PREFIX) === 0;\n        });\n\n        if (!isNil(providerName)) {\n            return {\n                name: providerName,\n                options: get(theObject, providerName)\n            };\n        }\n\n        return null;\n    }\n\n    private static async _processCustomCalcOptions(calcOption: CustomCalcOptions,\n                                                   calculatorDoc: object,\n                                                   customCalcProvider: CustomCalcProvider,\n                                                   refStack: string[] = []): Promise<any> {\n        switch (calcOption.name) {\n            case \"$ref\": {\n                let referencePathString = calcOption.options;\n\n                if (refStack.indexOf(referencePathString) !== -1) {\n                    throw new Error(`Circular reference: ${refStack.join(\"->\")}`);\n                }\n\n                let currentPath = toPath(referencePathString);\n                let objectValue;\n\n                while(currentPath.length > 0)\n                {\n                    if(has(calculatorDoc, currentPath))\n                    {\n                        objectValue = get(calculatorDoc, currentPath);\n                        break;\n                    }\n\n                    currentPath.pop();\n                }\n\n                // Give the custom calc provider an opportunity to give a value\n                if(isUndefined(objectValue) && !isNil(customCalcProvider))\n                {\n                    objectValue = await customCalcProvider(calcOption.name, calcOption.options);\n                }\n                else\n                {\n                    objectValue = await JSONCalc._calculate(objectValue, calculatorDoc, customCalcProvider, refStack.concat([referencePathString]));\n                }\n\n                if(!isUndefined(objectValue))\n                {\n                    if(currentPath.length > 0)\n                    {\n                        set(calculatorDoc, currentPath, objectValue);\n                        return get(calculatorDoc, referencePathString);\n                    }\n\n                    return objectValue;\n                }\n\n                return undefined;\n            }\n            default: {\n                let options = await JSONCalc.calculate(calcOption.options, calculatorDoc, customCalcProvider);\n\n                if (!isNil(customCalcProvider)) {\n                    return customCalcProvider(calcOption.name, options);\n                }\n            }\n        }\n    }\n\n    private static async _calculate(objectToCalculate: string | object,\n                                    calculatorDoc: object,\n                                    customCalcProvider?: CustomCalcProvider,\n                                    refStack: string[] = []): Promise<any> {\n\n        if (isString(objectToCalculate)) {\n            // This is a string, let's go through and replace any references in the form of {{reference}}\n            return stringReplaceAsync(\n                objectToCalculate as string,\n                new RegExp(JSONCalc.STRING_REFERENCE_REGEX, \"g\"),\n                async (fullRef: string, refString: string) => {\n                    let returnString = await JSONCalc._processCustomCalcOptions({name: \"$ref\", options: refString}, calculatorDoc, customCalcProvider, refStack);\n\n                    if(isNil(returnString))\n                    {\n                        returnString = JSONCalc.MISSING_VALUE_PLACEHOLDER;\n                    }\n                    else if(isObjectLike(returnString))\n                    {\n                        returnString = JSON.stringify(returnString);\n                    }\n\n                    return returnString;\n                });\n\n        } else if (isObjectLike(objectToCalculate)) {\n            let customCalcOptions = JSONCalc._extractCustomCalcOptions(objectToCalculate as object);\n\n            if (!isNil(customCalcOptions)) {\n                // This is a custom calc object.\n                return JSONCalc._processCustomCalcOptions(customCalcOptions, calculatorDoc, customCalcProvider, refStack)\n            } else {\n                // This is just a standard object. Loop through every key, value and process each.\n                let promises = map(objectToCalculate, async (value, key) => {\n                    objectToCalculate[key] = await JSONCalc._calculate(value, calculatorDoc, customCalcProvider, refStack);\n                });\n\n                await Promise.all(promises);\n            }\n        }\n\n        return objectToCalculate;\n    }\n\n    /**\n     * Calculate.\n     * @param objectToCalculate\n     * @param calculatorDoc\n     * @param customCalcProvider\n     */\n    static async calculate(objectToCalculate: object | string,\n                           calculatorDoc: object,\n                           customCalcProvider?: CustomCalcProvider): Promise<any> {\n        return this._calculate(objectToCalculate, calculatorDoc, customCalcProvider);\n    }\n}"]}