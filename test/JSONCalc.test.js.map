{"version":3,"file":"JSONCalc.test.js","sourceRoot":"","sources":["JSONCalc.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {JSONCalc} from \"../JSONCalc\";\n\nlet remoteDocs = {\n    \"test/test\": {\n        \"object1\": \"Object 1 Remote\",\n        \"object2\": \"{{test}}\",\n        \"test\": \"Object 2 Remote\"\n    }\n};\n\nasync function remoteDocProvider(location: string): Promise<any> {\n    return remoteDocs[location];\n}\n\nasync function actionExecutionProvider(actionName: string, actionOptions?: any): Promise<any> {\n    switch (actionName) {\n        case \"$http\": {\n            return {\n                status: 200,\n                url: actionOptions.url\n            };\n        }\n    }\n}\n\ntest(\"parsing a local reference path\", () => {\n    expect(JSONCalc.parseReferencePath(\"foo.bar.test\"))\n        .toEqual({location: undefined, objectPath: \"foo.bar.test\"});\n});\n\ntest(\"parsing a remote reference path\", () => {\n    expect(JSONCalc.parseReferencePath(\"test/test#foo.bar.test\"))\n        .toEqual({location: \"test/test\", objectPath: \"foo.bar.test\"});\n});\n\ntest(\"extracting references\", () => {\n    expect(JSONCalc.extractReferences({\n        \"test1\": \"{{object1}}\",\n        \"test2\": \"{{test/test#object1}}\",\n        \"test3\": {\"$ref\": \"object2\"},\n        \"test4\": {\"$ref\": \"test/test#object2\"}\n    }))\n        .toEqual(\n            expect.arrayContaining([\n                expect.objectContaining({location: undefined, objectPath: \"object1\"}),\n                expect.objectContaining({location: \"test/test\", objectPath: \"object1\"}),\n                expect.objectContaining({location: undefined, objectPath: \"object2\"}),\n                expect.objectContaining({location: \"test/test\", objectPath: \"object2\"}),\n            ])\n        );\n});\n\ntest(\"filling references\", async () => {\n    expect(await JSONCalc.fillReferences({\n        \"test1\": \"{{object1}}\",\n        \"test2\": \"{{test/test#object1}}\",\n        \"test3\": {\"$ref\": \"object2\"},\n        \"test4\": {\"$ref\": \"test/test#object2\"}\n    }, {\n        \"object1\": \"Object 1 Local\",\n        \"object2\": \"Object 2 Local\"\n    }, remoteDocProvider))\n        .toEqual({\n            \"test1\": \"Object 1 Local\",\n            \"test2\": \"Object 1 Remote\",\n            \"test3\": \"Object 2 Local\",\n            \"test4\": \"Object 2 Remote\"\n        });\n});\n\ntest(\"catching circular references\", async () => {\n    await expect(JSONCalc.fillReferences({\n        \"test1\": \"{{object1}}\"\n    }, {\n        \"object1\": \"{{object2.level1}}\",\n        \"object2\": {\n            \"level1\": \"{{object1}}\"\n        }\n    }, remoteDocProvider))\n        .rejects\n        .toThrow()\n});\n\ntest(\"executing a simple action 2\", async () => {\n    expect(await JSONCalc.fillReferences({\n        \"test1\": {\"$ref\": \"get_google\"},\n        \"test2\": {\"$ref\": \"get_multi\"}\n    }, {\n        \"get_google\": {\n            \"$http\": {\n                \"url\": \"http://www.google.com\"\n            }\n        },\n        \"get_multi\": {\n            \"$http\": {\n                \"url\": {\n                    \"$ref\": \"get_google\"\n                }\n            }\n        }\n    }, remoteDocProvider, actionExecutionProvider))\n        .toEqual({\n            \"test1\": {\n                status: 200,\n                url: \"http://www.google.com\"\n            },\n            \"test2\": {\n                status: 200,\n                url: {\n                    status: 200,\n                    url: \"http://www.google.com\"\n                }\n            }\n        });\n});\n\ntest(\"executing a complex action\", async () => {\n    expect(await JSONCalc.fillReferences({\n        \"test1\": {\"$ref\": \"get_google.url\"},\n        \"test2\": {\"$ref\": \"get_multi\"}\n    }, {\n        \"get_google\": {\n            \"$http\": {\n                \"url\": \"http://www.google.com\"\n            }\n        },\n        \"get_multi\": {\n            \"$http\": {\n                \"url\": {\n                    \"$ref\": \"get_google\"\n                }\n            }\n        }\n    }, remoteDocProvider, actionExecutionProvider))\n        .toEqual({\n            \"test1\": \"http://www.google.com\",\n            \"test2\": {\n                status: 200,\n                url: {\n                    status: 200,\n                    url: \"http://www.google.com\"\n                }\n            }\n        });\n});"]}