{"version":3,"file":"JSONCalc.test.js","sourceRoot":"","sources":["JSONCalc.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport {JSONCalc} from \"../JSONCalc\";\n\ndescribe(\"calculate\", () => {\n    it(\"should calculate a simple string reference\", async () => {\n\n        let result = await JSONCalc.calculate(\"this is {{object1}}\", {\n            object1: \"cool!\"\n        });\n\n        assert.strictEqual(result, \"this is cool!\");\n    });\n\n    it(\"calculate a complex string reference\", async () => {\n\n        let result = await JSONCalc.calculate(\"this is {{object1.subObject1}}\", {\n            object1: {\n                subObject1: \"cool!\"\n            }\n        });\n\n        assert.strictEqual(result, \"this is cool!\");\n    });\n\n    it(\"should calculate a simple object reference\", async () => {\n\n        let result = await JSONCalc.calculate({test: {$ref: \"object1\"}}, {\n            object1: \"cool!\"\n        });\n\n        assert.deepStrictEqual(result, {test: \"cool!\"});\n    });\n\n    it(\"should calculate a complex object reference\", async () => {\n\n        let result = await JSONCalc.calculate({test: {$ref: \"object1.subObject1\"}}, {\n            object1: {\n                subObject1: \"cool!\"\n            }\n        });\n\n        assert.deepStrictEqual(result, {test: \"cool!\"});\n    });\n\n    it(\"should calculate a multi-step complex object reference\", async () => {\n\n        let calcDoc = {\n            object1: {\n                subObject1: {$ref: \"object2\"}\n            },\n            object2: {\n                subObject2: \"cool!\"\n            }\n        };\n\n        let result = await JSONCalc.calculate({test: {$ref: \"object1.subObject1.subObject2\"}}, calcDoc);\n\n        assert.deepStrictEqual(result, {test: \"cool!\"});\n    });\n\n    it(\"should modify the calcDoc after calculating\", async () => {\n\n        let calcDoc = {\n            object1: {\n                subObject1: {$ref: \"object2\"}\n            },\n            object2: {\n                subObject2: \"cool!\"\n            }\n        };\n\n        let result = await JSONCalc.calculate({test: {$ref: \"object1.subObject1.subObject2\"}}, calcDoc);\n\n        assert.deepStrictEqual(calcDoc, {\n            object1: {\n                subObject1: {\n                    subObject2: \"cool!\"\n                }\n            },\n            object2: {\n                subObject2: \"cool!\"\n            }\n        });\n    });\n\n    it(\"should detect a circular reference\", async () => {\n        try {\n            await JSONCalc.calculate({test: {$ref: \"object1\"}}, {\n                object1: \"{{object2}}\",\n                object2: {\n                    subObject1: \"{{object1}}\"\n                }\n            });\n        } catch (e) {\n            return;\n        }\n\n        assert.fail(\"Should throw an exception\");\n    });\n\n    it(\"should calculate a with custom calculation with a missing reference\", async () => {\n\n        let result = await JSONCalc.calculate(\"this is {{not_here.value}}\",\n            {},\n            async (name, options) => {\n                if (name === \"$ref\" && options === \"not_here.value\") {\n                    return \"cool!\";\n                }\n            });\n\n        assert.strictEqual(result, \"this is cool!\");\n    });\n});"]}